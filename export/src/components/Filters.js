import React, { useState } from 'react';
import {
  FilterStatuses,
  FilterRenders,
  FilterColors,
  FilterMaterials,
  FilterCategories,
  FilterOther,
  FilterStyles,
  FilterFormats,
  FilterSofts,
  FilterAnimation,
  FilterPolygons
} from './filters';
import FilterSections from './filters/FilterSections';
import translationService from '../services/translationService';

const Filters = () => {
  const [activeTab, setActiveTab] = useState('categories');
  const [showTranslation, setShowTranslation] = useState(false);
  const [translatedTabs, setTranslatedTabs] = useState({});

  const tabs = [
    { id: 'categories', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', icon: 'üìÅ' },
    { id: 'sections', label: '–†–∞–∑–¥–µ–ª—ã', icon: 'üìÇ' },
    { id: 'softs', label: '–°–æ—Ñ—Ç—ã', icon: 'üíª' },
    { id: 'formats', label: '–§–æ—Ä–º–∞—Ç—ã', icon: 'üìÑ' },
    { id: 'colors', label: '–¶–≤–µ—Ç–∞', icon: 'üé®' },
    { id: 'materials', label: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', icon: 'üß±' },
    { id: 'renders', label: '–†–µ–Ω–¥–µ—Ä—ã', icon: 'üñºÔ∏è' },
    { id: 'statuses', label: '–°—Ç–∞—Ç—É—Å—ã', icon: 'üìä' },
    { id: 'styles', label: '–°—Ç–∏–ª–∏', icon: '‚ú®' },
    { id: 'animation', label: '–ê–Ω–∏–º–∞—Ü–∏—è', icon: 'üé¨' },
    { id: 'polygons', label: '–ü–æ–ª–∏–≥–æ–Ω–∞–∂', icon: 'üî∫' },
    { id: 'other', label: '–ü—Ä–æ—á–µ–µ', icon: '‚öôÔ∏è' }
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∞–±–æ–≤
  const translateTabs = async () => {
    const translations = {};
    for (const tab of tabs) {
      try {
        const translated = await translationService.translateText(tab.label);
        translations[tab.id] = translated;
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è ${tab.label}:`, error);
        translations[tab.id] = tab.label;
      }
    }
    setTranslatedTabs(translations);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–∞
  const getTabLabel = (tab) => {
    return showTranslation && translatedTabs[tab.id] ? translatedTabs[tab.id] : tab.label;
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case 'categories':
        return <FilterCategories />;
      case 'sections':
        return <FilterSections />;
      case 'softs':
        return <FilterSofts />;
      case 'formats':
        return <FilterFormats />;
      case 'colors':
        return <FilterColors />;
      case 'materials':
        return <FilterMaterials />;
      case 'renders':
        return <FilterRenders />;
      case 'statuses':
        return <FilterStatuses />;
      case 'styles':
        return <FilterStyles />;
      case 'animation':
        return <FilterAnimation />;
      case 'polygons':
        return <FilterPolygons />;
      case 'other':
        return <FilterOther />;
      default:
        return <FilterCategories />;
    }
  };

  return (
    <div>
      <div className="flex flex-col lg:flex-row lg:justify-between lg:items-center gap-4 mb-6">
        <div>
          <h1 className="text-xl sm:text-2xl font-bold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</h1>
          <div className="text-gray-500 text-sm">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ 3D –º–æ–¥–µ–ª–µ–π</div>
        </div>
        <div className="flex flex-col sm:flex-row items-stretch sm:items-center gap-2 sm:gap-3">
          <button
            onClick={async () => {
              if (!showTranslation) {
                await translateTabs();
              }
              setShowTranslation(!showTranslation);
            }}
            className={`px-3 sm:px-4 py-2 text-sm rounded-lg transition-colors ${
              showTranslation 
                ? 'bg-green-500 text-white hover:bg-green-600' 
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
          >
            {showTranslation ? 'üá¨üáß EN' : 'üá∑üá∫ RU'} –ü–µ—Ä–µ–≤–æ–¥
          </button>
          <button className="bg-blue-500 hover:bg-blue-600 text-white px-3 sm:px-4 py-2 rounded flex items-center justify-center gap-2 text-sm">
            + –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
          </button>
        </div>
      </div>

      {/* –í–∫–ª–∞–¥–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
      <div className="bg-white rounded-lg shadow mb-6">
        <div className="border-b border-gray-200">
          <nav className="flex flex-wrap gap-2 sm:gap-4 lg:gap-8 px-4 sm:px-6 overflow-x-auto">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-3 sm:py-4 px-2 sm:px-3 border-b-2 font-medium text-xs sm:text-sm flex items-center gap-1 sm:gap-2 whitespace-nowrap ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <span className="text-base sm:text-lg">{tab.icon}</span>
                <span className="hidden sm:inline">{getTabLabel(tab)}</span>
              </button>
            ))}
          </nav>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ */}
        <div className="p-4 sm:p-6">
          {renderTabContent()}
        </div>
      </div>
    </div>
  );
};

export default Filters;