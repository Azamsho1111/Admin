/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ FTP
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
 */
class FTPDataService {
  constructor() {
    this.ftpConfig = {
      host: '109.95.210.216',
      user: 'u185465',
      password: 'vU4zS5lB7t',
      port: 21
    };
    this.cache = {};
    this.lastUpdate = {};
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  async loadDataFromServer(filename) {
    try {
      console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º ${filename} —Å —Å–µ—Ä–≤–µ—Ä–∞...`);
      const response = await fetch(`/api/${filename}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        this.cache[filename] = data;
        this.lastUpdate[filename] = Date.now();
        console.log(`–î–∞–Ω–Ω—ã–µ ${filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞`);
        return data;
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filename} —Å —Å–µ—Ä–≤–µ—Ä–∞:`, error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ (fallback)
  getServerData(filename) {
    const serverData = {
      'categories.json': {
        success: true,
        data: [
          { id: 1, name: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', name_en: 'Architecture', position: 1, models_count: 25 },
          { id: 2, name: '–ú–µ–±–µ–ª—å', name_en: 'Furniture', position: 2, models_count: 150 },
          { id: 3, name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', name_en: 'Transport', position: 3, models_count: 75 },
          { id: 4, name: '–î–µ–∫–æ—Ä', name_en: 'Decor', position: 4, models_count: 90 },
          { id: 5, name: '–û—Å–≤–µ—â–µ–Ω–∏–µ', name_en: 'Lighting', position: 5, models_count: 45 }
        ]
      },
      'dashboard.json': {
        success: true,
        data: {
          total_models: 1250,
          pending_models: 45,
          approved_models: 1180,
          rejected_models: 25,
          total_users: 340,
          active_users: 285,
          monthly_uploads: [120, 150, 180, 165, 200, 220, 195, 210, 185, 225, 240, 260],
          daily_downloads: [45, 67, 52, 78, 89, 65, 72],
          revenue: 125000
        }
      },
      'sections.json': {
        success: true,
        data: [
          { id: 1, category_id: 1, name: '–ñ–∏–ª—ã–µ –∑–¥–∞–Ω–∏—è', name_en: 'residential', icon: 'üè†' },
          { id: 2, category_id: 1, name: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ', name_en: 'commercial', icon: 'üè¢' },
          { id: 3, category_id: 2, name: '–°—Ç–æ–ª—ã', name_en: 'tables', icon: 'ü™ë' },
          { id: 4, category_id: 2, name: '–°—Ç—É–ª—å—è', name_en: 'chairs', icon: 'ü™ë' },
          { id: 5, category_id: 3, name: '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏', name_en: 'cars', icon: 'üöó' }
        ]
      },
      'models.json': {
        success: true,
        data: [
          { id: 1, name: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–≤–∞–Ω', category_id: 2, status: 'approved', author: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', downloads: 150 },
          { id: 2, name: '–û—Ñ–∏—Å–Ω–æ–µ –∫—Ä–µ—Å–ª–æ', category_id: 2, status: 'pending', author: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', downloads: 85 },
          { id: 3, name: '–¢–æ—Ä—à–µ—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', category_id: 5, status: 'approved', author: '–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤', downloads: 220 },
          { id: 4, name: 'BMW X5', category_id: 3, status: 'approved', author: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤', downloads: 340 },
          { id: 5, name: '–ó–∞–≥–æ—Ä–æ–¥–Ω—ã–π –¥–æ–º', category_id: 1, status: 'pending', author: '–ï–ª–µ–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞', downloads: 95 }
        ]
      },
      'users.json': {
        success: true,
        data: [
          { id: 1, name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', email: 'ivan@example.com', role: 'designer', models_count: 25, status: 'active' },
          { id: 2, name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', email: 'maria@example.com', role: 'admin', models_count: 45, status: 'active' },
          { id: 3, name: '–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤', email: 'alexey@example.com', role: 'designer', models_count: 15, status: 'active' },
          { id: 4, name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤', email: 'dmitry@example.com', role: 'moderator', models_count: 30, status: 'inactive' },
          { id: 5, name: '–ï–ª–µ–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞', email: 'elena@example.com', role: 'designer', models_count: 12, status: 'active' }
        ]
      }
    };

    return serverData[filename] || { success: false, error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' };
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä
  async saveDataToFTP(filename, data) {
    try {
      const response = await fetch(`/proxy/ftp/${filename}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-FTP-Host': this.ftpConfig.host,
          'X-FTP-User': this.ftpConfig.user,
          'X-FTP-Password': this.ftpConfig.password
        },
        body: JSON.stringify(data)
      });

      if (response.ok) {
        this.cache[filename] = data;
        this.lastUpdate[filename] = Date.now();
        console.log(`–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ FTP: ${filename}`);
        return { success: true };
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${filename} –Ω–∞ FTP:`, error);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ –∫–∞–∫ fallback
    this.cache[filename] = data;
    localStorage.setItem(`ftp_cache_${filename}`, JSON.stringify(data));
    return { success: true, cached: true };
  }

  // API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  async getCategories() {
    return await this.loadDataFromServer('categories.json');
  }

  async getDashboardStats() {
    return await this.loadDataFromServer('dashboard.json');
  }

  async getSections() {
    return await this.loadDataFromServer('sections.json');
  }

  async getModels() {
    return await this.loadDataFromServer('models.json');
  }

  async getUsers() {
    return await this.loadDataFromServer('users.json');
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  async saveCategories(categories) {
    console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä...');
    return await this.saveDataToFTP('categories.json', { success: true, data: categories });
  }

  async saveDashboardStats(stats) {
    console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä...');
    return await this.saveDataToFTP('dashboard.json', { success: true, data: stats });
  }

  async saveSections(sections) {
    console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∫—Ü–∏–∏ –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä...');
    return await this.saveDataToFTP('sections.json', { success: true, data: sections });
  }

  async saveModels(models) {
    console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª–∏ –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä...');
    return await this.saveDataToFTP('models.json', { success: true, data: models });
  }

  async saveUsers(users) {
    console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä...');
    return await this.saveDataToFTP('users.json', { success: true, data: users });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP
  async testConnection() {
    try {
      const result = await this.getCategories();
      return result.success;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  getConnectionStatus() {
    return {
      host: this.ftpConfig.host,
      user: this.ftpConfig.user,
      connected: Object.keys(this.cache).length > 0,
      lastUpdate: Math.max(...Object.values(this.lastUpdate).filter(t => t)) || null
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const ftpDataService = new FTPDataService();
export default ftpDataService;